name: Run tests
on:
  push:
    branches:
      - action_test
      - master
      - '[45].*.z'
  pull_request_target:
    branches:
      - action_test
      - master
      - '[45].*.z'
jobs:

  test_composite_action:
    runs-on: ubuntu-latest
    name: Test composite  
    outputs:
      check-result: ${{ steps.composite.outputs.check-result }}
    steps: 
      - name: Composite
        id: composite
        uses: alisengul53/membership-check/membership@v1
        with:
          organization-name: 'hazelcast'
          member-name: ${{ github.event.pull_request.head.repo.owner.login }}
          token: ${{ secrets.PAT }}
      - run: |
          echo ${{ github.event.pull_request.head.repo.owner.login }}
          echo ${{ steps.composite.outputs.check-result }}
      
  run-tests:
    runs-on: ${{ matrix.os }}
    needs: [test_composite_action]
    if: ${{ needs.test_composite_action.outputs.check-result == 'true' || contains(github.event.pull_request.labels.*.name, 'pr_builder') }}
    name: Run tests with Python ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [ '3.6', '3.10' ]
        os: [ ubuntu-latest, windows-latest ]
      fail-fast: false
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          
      - name: Checkout code for push event
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Checkout code for PR
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements-test.txt
      - name: Run tests
        env:
          HAZELCAST_ENTERPRISE_KEY: ${{ secrets.HAZELCAST_ENTERPRISE_KEY }}
        run: python run_tests.py
      - name: Upload remote controller logs on test failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: rc-logs-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            rc_stderr.log
            rc_stdout.log
      - name: Publish results to Codecov
        if: ${{ matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest' }}
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
  run-linter:
    runs-on: ubuntu-latest
    needs: [test_composite_action]
    if: ${{ needs.test_composite_action.outputs.check-result == 'true' || contains(github.event.pull_request.labels.*.name, 'pr_builder') }}
    name: Run black to check the code style
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Checkout code for push event
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Checkout code for PR
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      - name: Run black
        run: |
          black --check --config black.toml .
  generate_docs:
    runs-on: ubuntu-latest
    needs: [test_composite_action]
    if: ${{ needs.test_composite_action.outputs.check-result == 'true' || contains(github.event.pull_request.labels.*.name, 'pr_builder') }}
    name: Generate documentation
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          
      - name: Checkout code for push event
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Checkout code for PR
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      - name: Generate documentation
        working-directory: docs
        run: |
          make html SPHINXOPTS="-W --keep-going -b linkcheck"
